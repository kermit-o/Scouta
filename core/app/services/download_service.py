import zipfile
import os
import json
from datetime import datetime
from typing import Dict, Any

class DownloadService:
    """Service for generating downloadable project packages"""
    
    def create_project_package(self, project_data: Dict[str, Any], project_id: str) -> str:
        """Create a ZIP package with the complete generated project"""
        
        # Create temp directory for project
        temp_dir = f"/tmp/forge_{project_id}"
        os.makedirs(temp_dir, exist_ok=True)
        
        # Create project structure
        self._generate_project_files(project_data, temp_dir)
        
        # Create ZIP file
        zip_path = f"/tmp/forge_{project_id}.zip"
        with zipfile.ZipFile(zip_path, 'w') as zipf:
            for root, dirs, files in os.walk(temp_dir):
                for file in files:
                    file_path = os.path.join(root, file)
                    arcname = os.path.relpath(file_path, temp_dir)
                    zipf.write(file_path, arcname)
        
        return zip_path
    
    def _generate_project_files(self, project_data: Dict[str, Any], output_dir: str):
        """Generate actual project files based on AI specifications"""
        
        # Extract project specs
        specs = project_data.get('specifications', {})
        code = project_data.get('generated_code', '')
        
        # Create README
        with open(os.path.join(output_dir, 'README.md'), 'w') as f:
            f.write(f"# {project_data.get('name', 'Generated Project')}\n\n")
            f.write("## Generated by Forge SaaS AI\n\n")
            f.write("### Project Description\n")
            f.write(f"{project_data.get('description', '')}\n\n")
            f.write("### Installation\n")
            f.write("```bash\npip install -r requirements.txt\npython main.py\n```\n")
        
        # Create requirements.txt
        with open(os.path.join(output_dir, 'requirements.txt'), 'w') as f:
            f.write("fastapi==0.104.1\nuvicorn==0.24.0\nsqlalchemy==2.0.23\n")
        
        # Create main application file
        with open(os.path.join(output_dir, 'main.py'), 'w') as f:
            f.write('''from fastapi import FastAPI
from typing import List, Optional
import uvicorn

app = FastAPI(title="Generated API")

@app.get("/")
async def root():
    return {"message": "Hello from your generated API!"}

@app.get("/health")
async def health_check():
    return {"status": "healthy"}

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)
''')
        
        # Create configuration
        with open(os.path.join(output_dir, 'config.py'), 'w') as f:
            f.write('''import os

class Settings:
    PROJECT_NAME = "Generated Project"
    VERSION = "1.0.0"
    DESCRIPTION = "Project generated by Forge SaaS AI"
    
settings = Settings()
''')
        
        # Add deployment files
        with open(os.path.join(output_dir, 'Dockerfile'), 'w') as f:
            f.write('''FROM python:3.11-slim

WORKDIR /app

COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

COPY . .

CMD ["python", "main.py"]
''')

        with open(os.path.join(output_dir, 'docker-compose.yml'), 'w') as f:
            f.write('''version: '3.8'

services:
  web:
    build: .
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
''')

