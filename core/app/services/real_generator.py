import os
import json
import zipfile
import tempfile
from typing import Dict, Any, List
from datetime import datetime

from backend.generators.fastapi_generator import FastAPIGenerator
from backend.generators.react_generator import ReactGenerator
from backend.generators.database_generator import DatabaseGenerator

class RealProjectGenerator:
    """Generates REAL, functional projects based on AI analysis"""
    
    def __init__(self):
        self.fastapi_gen = FastAPIGenerator()
        self.react_gen = ReactGenerator()
        self.db_gen = DatabaseGenerator()
    
    def generate_complete_project(self, project_spec: Dict[str, Any]) -> Dict[str, Any]:
        """Generate a complete, functional project"""
        
        project_name = project_spec.get("name", "generated_project")
        
        try:
            # Step 1: Generate backend with FastAPI
            print("🔄 Generando backend FastAPI...")
            backend_code = self.fastapi_gen.generate(project_spec)
            
            # Step 2: Generate frontend with React
            print("🔄 Generando frontend React...")
            frontend_code = self.react_gen.generate(project_spec)
            
            # Step 3: Generate database schema
            print("🔄 Generando esquema de base de datos...")
            database_code = self.db_gen.generate(project_spec)
            
            # Combine all code
            complete_project = {
                **backend_code,
                **frontend_code,
                **database_code
            }
            
            # Add project configuration files
            complete_project.update(self._generate_config_files(project_spec))
            
            print(f"✅ Proyecto generado: {len(complete_project)} archivos")
            
            return {
                "success": True,
                "project_name": project_name,
                "files": complete_project,
                "file_count": len(complete_project),
                "generated_at": datetime.now().isoformat()
            }
            
        except Exception as e:
            print(f"❌ Error generando proyecto: {e}")
            return {
                "success": False,
                "error": str(e)
            }
    
    def create_downloadable_package(self, project_data: Dict[str, Any]) -> str:
        """Create a downloadable ZIP package with the complete project"""
        
        project_name = project_data.get("project_name", "project")
        files = project_data.get("files", {})
        
        # Create temporary directory
        with tempfile.TemporaryDirectory() as temp_dir:
            project_dir = os.path.join(temp_dir, project_name)
            os.makedirs(project_dir)
            
            # Write all files
            for file_path, content in files.items():
                full_path = os.path.join(project_dir, file_path)
                
                # Create directories if needed
                os.makedirs(os.path.dirname(full_path), exist_ok=True)
                
                with open(full_path, 'w', encoding='utf-8') as f:
                    f.write(content)
            
            # Create ZIP file
            zip_path = f"/tmp/{project_name}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.zip"
            with zipfile.ZipFile(zip_path, 'w') as zipf:
                for root, dirs, files_in_dir in os.walk(project_dir):
                    for file in files_in_dir:
                        file_path = os.path.join(root, file)
                        arcname = os.path.relpath(file_path, temp_dir)
                        zipf.write(file_path, arcname)
            
            return zip_path
    
    def _generate_config_files(self, project_spec: Dict[str, Any]) -> Dict[str, str]:
        """Generate configuration files for the project"""
        
        project_name = project_spec.get("name", "my_project")
        
        config_files = {}
        
        # Dockerfile
        config_files["Dockerfile"] = f'''
FROM python:3.11-slim

WORKDIR /app

COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

COPY . .

CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]
'''
        
        # docker-compose.yml
        config_files["docker-compose.yml"] = f'''
version: '3.8'

services:
  web:
    build: .
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=sqlite:///./test.db
    volumes:
      - .:/app

  # Add database service if needed
  # db:
  #   image: postgres:13
  #   environment:
  #     - POSTGRES_DB={project_name}
  #     - POSTGRES_USER=user
  #     - POSTGRES_PASSWORD=pass
  #   ports:
  #     - "5432:5432"
'''
        
        # README.md
        config_files["README.md"] = f'''
# {project_name.title()}

## Project Generated by Forge SaaS AI

### Description
This project was automatically generated based on your requirements.

### Quick Start

1. **Backend Setup**
\`\`\`bash
cd backend
pip install -r requirements.txt
uvicorn main:app --reload
\`\`\`

2. **Frontend Setup** 
\`\`\`bash
cd frontend
npm install
npm start
\`\`\`

3. **Using Docker**
\`\`\`bash
docker-compose up --build
\`\`\`

### Project Structure
\`\`\`
{project_name}/
├── backend/          # FastAPI application
├── frontend/         # React application  
├── database/         # Database schemas
├── Dockerfile        # Container configuration
└── docker-compose.yml # Multi-service setup
\`\`\`

### API Documentation
Once running, visit: http://localhost:8000/docs

### Generated Features
- RESTful API with FastAPI
- React frontend application
- Database models and migrations
- Docker containerization
- Automatic documentation

---
*Generated on {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}*
'''
        
        # .gitignore
        config_files[".gitignore"] = '''
# Python
__pycache__/
*.pyc
*.pyo
*.pyd
.Python
env/
venv/
.venv/

# Node.js
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Database
*.db
*.sqlite3

# Environment variables
.env
.env.local

# IDE
.vscode/
.idea/
*.swp
*.swo

# OS
.DS_Store
Thumbs.db
'''
        
        return config_files

# Global instance
real_generator = RealProjectGenerator()
