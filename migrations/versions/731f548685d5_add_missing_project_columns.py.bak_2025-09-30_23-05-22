"""Add missing project columns"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql # Necesario para postgresql.UUID

# revision identifiers, used by Alembic.
revision = '731f548685d5'
down_revision = 'jobs_agent_runs_artifacts_0001' # O tu última revisión
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # -------------------------------------------------------------
    # CORRECCIÓN UUID - Cambios en tablas relacionadas (agent_runs)
    # -------------------------------------------------------------
    # CÓDIGO CORREGIDO PARA agent_runs:
    op.alter_column('agent_runs', 'id',
               existing_type=sa.VARCHAR(length=36),
               type_=postgresql.UUID(),
               existing_nullable=False,
               # ¡ESTA LÍNEA ES LA CLAVE!
               postgresql_using='id::uuid')
    op.drop_index('ix_agent_runs_project_id', table_name='agent_runs')
    op.alter_column('agent_runs', 'project_id',
               existing_type=sa.VARCHAR(length=36),
               type_=postgresql.UUID(),
               existing_nullable=False)
    op.alter_column('agent_runs', 'started_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=sa.text('now()'),
               existing_nullable=True)

    # -------------------------------------------------------------
    # CORRECCIÓN UUID - Cambios en tablas relacionadas (artifacts)
    # -------------------------------------------------------------
    op.alter_column('artifacts', 'id',
               existing_type=sa.VARCHAR(length=36),
               type_=postgresql.UUID(),
               existing_nullable=False,
               # AÑADIDO: Cláusula USING
               postgresql_using='id::uuid')
    op.alter_column('artifacts', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=sa.text('now()'),
               existing_nullable=True)
    op.drop_index('ix_artifacts_project_id', table_name='artifacts')
    op.alter_column('artifacts', 'project_id',
               existing_type=sa.VARCHAR(length=36),
               type_=postgresql.UUID(),
               existing_nullable=False)
    
    # -------------------------------------------------------------
    # CORRECCIÓN UUID - Cambios en tablas relacionadas (jobs)
    # -------------------------------------------------------------
    op.alter_column('jobs', 'id',
               existing_type=sa.VARCHAR(length=36),
               type_=postgresql.UUID(),
               existing_nullable=False,
               # AÑADIDO: Cláusula USING
               postgresql_using='id::uuid')
    op.alter_column('jobs', 'state',
               existing_type=sa.VARCHAR(length=200),
               server_default='pending',
               existing_nullable=True)
    op.alter_column('jobs', 'attempts',
               existing_type=sa.INTEGER(),
               server_default=sa.text('0'),
               existing_nullable=True)
    op.alter_column('jobs', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=sa.text('now()'),
               existing_nullable=True)
    op.drop_index('ix_jobs_project_id', table_name='jobs')
    op.alter_column('jobs', 'project_id',
               existing_type=sa.VARCHAR(length=36),
               type_=postgresql.UUID(),
               existing_nullable=False)

    # -------------------------------------------------------------
    # CAMBIOS EN LA TABLA PROJECTS (Las columnas faltantes)
    # -------------------------------------------------------------
    op.add_column('projects', sa.Column('requirements', sa.JSON(), nullable=True))
    op.add_column('projects', sa.Column('plan_json', sa.JSON(), nullable=True))
    op.add_column('projects', sa.Column('generated_plan', sa.Text(), nullable=True))
    op.add_column('projects', sa.Column('technology_stack', sa.JSON(), nullable=True))
    op.add_column('projects', sa.Column('result', sa.JSON(), nullable=True))
    op.add_column('projects', sa.Column('status', sa.Enum('pending', 'planning', 'executing', 'testing', 'finished', 'failed', name='projectstatus'), server_default='pending', nullable=True))
    op.add_column('projects', sa.Column('artifact_path', sa.String(length=255), nullable=True))
    op.add_column('projects', sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True))

    # ### end Alembic commands ###


# --- UUID_AGENT_RUNS_PLAN_B ---
# Migración segura cuando no se puede castear id -> uuid directamente
from sqlalchemy import text as _sa_text
from alembic import op as _op
from sqlalchemy.dialects import postgresql as _pg

# Asegurar extensión
_op.execute("CREATE EXTENSION IF NOT EXISTS pgcrypto;")

# Añadir columna nueva con UUID y default temporal
_op.add_column('agent_runs',
    sa.Column('id_new', _pg.UUID(as_uuid=True), server_default=sa.text('gen_random_uuid()'), nullable=False)
)

# Mover clave primaria a id_new
_op.execute("ALTER TABLE agent_runs DROP CONSTRAINT IF EXISTS agent_runs_pkey;")
_op.execute("ALTER TABLE agent_runs ADD PRIMARY KEY (id_new);")

# Eliminar antigua 'id' y renombrar
_op.drop_column('agent_runs', 'id')
_op.alter_column('agent_runs', 'id_new', new_column_name='id')
_op.execute("ALTER TABLE agent_runs ALTER COLUMN id DROP DEFAULT;")
# --- END UUID_AGENT_RUNS_PLAN_B ---
def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('projects', 'updated_at')
    op.drop_column('projects', 'artifact_path')
    op.drop_column('projects', 'status')
    op.drop_column('projects', 'result')
    op.drop_column('projects', 'technology_stack')
    op.drop_column('projects', 'generated_plan')
    op.drop_column('projects', 'plan_json')
    op.drop_column('projects', 'requirements')
    # Y deshacer los cambios de alter_column si fuera necesario (omitido por brevedad)
    # ### end Alembic commands ###
