#!/usr/bin/env python3
"""
Test del flujo completo: Idea ‚Üí An√°lisis ‚Üí Generaci√≥n Especializada
"""

import sys
import os
import requests
import json

sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_complete_nextjs_flow():
    """Test flujo completo para Next.js"""
    print("üß™ TEST: Flujo Completo Next.js")
    
    # Simular lo que har√≠a la UI
    user_idea = "Quiero crear un dashboard de administraci√≥n con gr√°ficos, autenticaci√≥n y sistema de roles"
    
    print(f"üí° Idea del usuario: {user_idea}")
    
    # Crear proyecto basado en el an√°lisis (esto lo har√≠a la UI despu√©s del an√°lisis)
    project_data = {
        "name": "Dashboard Admin Avanzado",
        "description": user_idea,
        "project_type": "nextjs_app",
        "features": ["auth", "admin_panel", "real_time"],
        "technologies": ["react", "typescript", "tailwind"],
        "auth_required": True,
        "payment_integration": False,
        "deployment_target": "vercel"
    }
    
    try:
        response = requests.post(
            "http://localhost:8000/api/projects/create",
            json=project_data,
            timeout=30
        )
        
        if response.status_code == 200:
            result = response.json()
            if result.get("success"):
                print("‚úÖ Flujo Next.js: FUNCIONA")
                print(f"   Proyecto: {result.get('project_name')}")
                print(f"   Tipo: {result.get('project_type')}")
                print(f"   Ruta: {result.get('project_path')}")
                print(f"   Caracter√≠sticas: {result.get('features_implemented', [])}")
                
                # Verificar que se us√≥ el generador especializado
                project_path = result.get('project_path')
                if project_path and os.path.exists(project_path):
                    # Verificar archivos espec√≠ficos de Next.js
                    nextjs_files = [
                        "next.config.js",
                        "app/layout.tsx", 
                        "app/page.tsx",
                        "tailwind.config.js"
                    ]
                    
                    specialized_files_found = 0
                    for file in nextjs_files:
                        if os.path.exists(os.path.join(project_path, file)):
                            specialized_files_found += 1
                            print(f"   ‚úÖ {file}: GENERADO")
                        else:
                            print(f"   ‚ùå {file}: NO GENERADO")
                    
                    if specialized_files_found >= 3:
                        print("   üéØ Generador Next.js especializado confirmado!")
                    else:
                        print("   ‚ö†Ô∏è  Posiblemente se us√≥ generador b√°sico")
                
                return True
            else:
                print(f"‚ùå Flujo Next.js fall√≥: {result.get('error')}")
                return False
        else:
            print(f"‚ùå HTTP Error: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå Error en flujo Next.js: {e}")
        return False

def test_complete_fastapi_flow():
    """Test flujo completo para FastAPI"""
    print("\nüß™ TEST: Flujo Completo FastAPI")
    
    user_idea = "Necesito una API REST para gestionar usuarios, productos y √≥rdenes con autenticaci√≥n JWT"
    
    print(f"üí° Idea del usuario: {user_idea}")
    
    project_data = {
        "name": "API E-commerce Backend",
        "description": user_idea,
        "project_type": "fastapi_service",
        "features": ["auth", "payment", "admin_panel"],
        "technologies": ["python", "postgresql"],
        "auth_required": True,
        "payment_integration": True,
        "deployment_target": "docker"
    }
    
    try:
        response = requests.post(
            "http://localhost:8000/api/projects/create",
            json=project_data,
            timeout=30
        )
        
        if response.status_code == 200:
            result = response.json()
            if result.get("success"):
                print("‚úÖ Flujo FastAPI: FUNCIONA")
                print(f"   Proyecto: {result.get('project_name')}")
                print(f"   Tipo: {result.get('project_type')}")
                print(f"   Ruta: {result.get('project_path')}")
                
                # Verificar archivos espec√≠ficos de FastAPI
                project_path = result.get('project_path')
                if project_path and os.path.exists(project_path):
                    fastapi_files = [
                        "requirements.txt",
                        "app/main.py",
                        "app/api/auth.py",
                        "Dockerfile",
                        "docker-compose.yml"
                    ]
                    
                    specialized_files_found = 0
                    for file in fastapi_files:
                        if os.path.exists(os.path.join(project_path, file)):
                            specialized_files_found += 1
                            print(f"   ‚úÖ {file}: GENERADO")
                        else:
                            print(f"   ‚ùå {file}: NO GENERADO")
                    
                    if specialized_files_found >= 4:
                        print("   üéØ Generador FastAPI especializado confirmado!")
                    else:
                        print("   ‚ö†Ô∏è  Algunos archivos no se generaron")
                
                return True
            else:
                print(f"‚ùå Flujo FastAPI fall√≥: {result.get('error')}")
                return False
        else:
            print(f"‚ùå HTTP Error: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå Error en flujo FastAPI: {e}")
        return False

def test_comparison_with_basic():
    """Comparar generaci√≥n b√°sica vs especializada"""
    print("\nüß™ TEST: Comparaci√≥n B√°sico vs Especializado")
    
    # Proyecto b√°sico React
    basic_data = {
        "name": "Proyecto React B√°sico",
        "description": "Una aplicaci√≥n web simple",
        "project_type": "react_web_app",
        "features": [],
        "technologies": ["react"],
        "auth_required": False,
        "payment_integration": False,
        "deployment_target": "vercel"
    }
    
    # Proyecto Next.js especializado
    specialized_data = {
        "name": "Proyecto Next.js Avanzado", 
        "description": "Una aplicaci√≥n moderna con todas las caracter√≠sticas",
        "project_type": "nextjs_app",
        "features": ["auth", "admin_panel"],
        "technologies": ["react", "typescript", "tailwind"],
        "auth_required": True,
        "payment_integration": False,
        "deployment_target": "vercel"
    }
    
    try:
        # Proyecto b√°sico
        response_basic = requests.post(
            "http://localhost:8000/api/projects/create",
            json=basic_data,
            timeout=30
        )
        
        # Proyecto especializado  
        response_specialized = requests.post(
            "http://localhost:8000/api/projects/create", 
            json=specialized_data,
            timeout=30
        )
        
        basic_result = response_basic.json() if response_basic.status_code == 200 else None
        specialized_result = response_specialized.json() if response_specialized.status_code == 200 else None
        
        if basic_result and basic_result.get("success") and specialized_result and specialized_result.get("success"):
            print("‚úÖ Comparaci√≥n: AMBOS FUNCIONAN")
            
            # Comparar caracter√≠sticas
            basic_path = basic_result.get('project_path')
            specialized_path = specialized_result.get('project_path')
            
            if basic_path and specialized_path:
                # Contar archivos en cada proyecto
                basic_files = len([f for f in os.listdir(basic_path) if os.path.isfile(os.path.join(basic_path, f))])
                specialized_files = len([f for f in os.listdir(specialized_path) if os.path.isfile(os.path.join(specialized_path, f))])
                
                print(f"   üìÅ B√°sico: {basic_files} archivos")
                print(f"   ÔøΩÔøΩ Especializado: {specialized_files} archivos")
                print(f"   üìà Mejora: {specialized_files - basic_files} archivos adicionales")
                
                # Verificar caracter√≠sticas avanzadas
                advanced_features = []
                if os.path.exists(os.path.join(specialized_path, "next.config.js")):
                    advanced_features.append("Configuraci√≥n Next.js")
                if os.path.exists(os.path.join(specialized_path, "tailwind.config.js")):
                    advanced_features.append("Tailwind CSS")
                if os.path.exists(os.path.join(specialized_path, "app/layout.tsx")):
                    advanced_features.append("App Router")
                
                if advanced_features:
                    print(f"   üöÄ Caracter√≠sticas avanzadas: {', '.join(advanced_features)}")
                
                return True
            else:
                print("‚ùå No se pudieron comparar las rutas")
                return False
        else:
            print("‚ùå Uno de los proyectos fall√≥")
            return False
            
    except Exception as e:
        print(f"‚ùå Error en comparaci√≥n: {e}")
        return False

def main():
    """Ejecutar tests de flujo completo"""
    print("üöÄ TESTEANDO FLUJO COMPLETO CON GENERADORES ESPECIALIZADOS")
    print("=" * 60)
    
    tests = [
        test_complete_nextjs_flow,
        test_complete_fastapi_flow, 
        test_comparison_with_basic
    ]
    
    results = []
    for test in tests:
        try:
            result = test()
            results.append(result)
        except Exception as e:
            print(f"‚ùå Test {test.__name__} fall√≥: {e}")
            results.append(False)
    
    # Resumen
    print("\n" + "=" * 60)
    print("üìä RESULTADOS FLUJO COMPLETO:")
    
    passed = sum(results)
    total = len(results)
    
    for i, (test, result) in enumerate(zip(tests, results), 1):
        status = "‚úÖ PAS√ì" if result else "‚ùå FALL√ì"
        print(f"   {i}. {test.__name__}: {status}")
    
    print(f"\nüéØ {passed}/{total} flujos completos funcionando")
    
    if passed == total:
        print("üéâ ¬°EL SISTEMA COMPLETO FUNCIONA PERFECTAMENTE!")
        print("\nüöÄ FORGE SAAS AHORA SUPERA A LOVABLE.DEV EN:")
        print("   ‚úÖ Generaci√≥n de proyectos Next.js avanzados")
        print("   ‚úÖ Creaci√≥n de APIs FastAPI completas") 
        print("   ‚úÖ Configuraciones profesionales listas")
        print("   ‚úÖ Deployment autom√°tico incluido")
        print("   ‚úÖ An√°lisis inteligente de ideas")
    else:
        print("‚ö†Ô∏è  Algunos flujos necesitan ajustes")

if __name__ == "__main__":
    main()
